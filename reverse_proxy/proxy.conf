upstream api_backend {
  server $PROXY_UPSTREAM;
  keepalive_timeout $KEEP_ALIVE_TIMEOUT;
}

server {
    listen $HTTP_PORT default_server;
    listen [::]:$HTTP_PORT default_server;
    server_name $SERVER_NAME;

    return 301 https://$host$request_uri;
}

server {
    listen                  $HTTPS_PORT ssl;
    listen                  [::]:$HTTPS_PORT ssl;
    server_name             $SERVER_NAME;


    ## Set the real IP address for the client
    set_real_ip_from 0.0.0.0/22; # Private IP range for GCP Load Balancers
    set_real_ip_from 0.0.0.0/16; # Private IP range for GCP Load Balancers
    set_real_ip_from 0.0.0.0/32; # devops-lb Frontend IP

    # Replace REMOTE_ADDR header with the values from X-Forwarded-For.
    real_ip_header X-Forwarded-For;
    # Filter out the trusted ips from the chain,
    # therefore the last non-trusted address in the chain will be used as the remote address.
    real_ip_recursive on;
    ##  END Set the real IP address for the client


    # Configure upstream variables
    set $protocol $PROXY_PROTOCOL;
    set $upstream $PROXY_UPSTREAM;

    # Disable nginx version
    server_tokens           off;

    ## Set DNS resolver to the embedded Docker DNS server
    resolver 127.0.0.11 valid=1s;

    ## BEGIN SSL settings
    ssl_certificate         /etc/your-dir/certificates/server/PUBLIC.pem;
    ssl_certificate_key     /etc/your-dir/certificates/server/PRIVATE.pem;
    ssl_stapling            on;
    ssl_stapling_verify     on;
    ssl_protocols           TLSv1.2 TLSv1.3;
    ssl_session_timeout     1d;
    ssl_session_tickets     off;
    ssl_dhparam             /etc/ssl/certs/dhparam.pem;
    ssl_ciphers             'ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256';
    ssl_prefer_server_ciphers on;
    ## END SSL settings


    ## BEGIN header configuration
    add_header Strict-Transport-Security    "max-age=31536000; includeSubDomains" always;
    add_header X-Content-Type-Options       nosniff;
    add_header X-Frame-Options              SAMEORIGIN;
    add_header X-XSS-Protection             "1; mode=block";
    add_header Allow                        "DELETE, GET, PATCH, POST, PUT" always;
    ## END header configuration


    ## BEGIN buffer settings
    client_body_buffer_size         1K;
    client_header_buffer_size       1k;
    # The client and server side currently accept a maximum request body
    # size of 10M. Here, we set the maximum allowed request body size in
    # Nginx to 11M. This is done to prevent a 413 error
    # (Request Entity Too Large).
    client_max_body_size            11M;
    large_client_header_buffers     4 8k;
    ## END buffer settings

    # Return 'Not Allowed' if unsupported method
    if ( $request_method !~ ^(DELETE|GET|PATCH|POST|PUT)$ ) {
        return 405;
    }

    ## BEGIN Locations
    # Health Check endpoint
    location /web-health {
        return 200 "healthy";
    }

    # Redirect all to upstream
    location / {
        proxy_pass $protocol://api_backend/$request_uri;
        proxy_pass_header Authorization;

        proxy_http_version 1.1;
        proxy_ssl_server_name on;
        proxy_set_header Host $upstream;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Request-Id $request_id;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header Connection "";

        proxy_buffering off;
        proxy_read_timeout 300s;
        proxy_redirect off;
        proxy_ssl_verify off;
    }
    ## END Locations
}
